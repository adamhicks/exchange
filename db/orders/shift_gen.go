package orders

// Code generated by shiftgen at fsm.go:14. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"strings"
	"time"
	"github.com/luno/jettison/errors"
	"github.com/luno/jettison/j"
	"github.com/luno/shift"
)

// Insert inserts a new orders table entity. All the fields of the 
// CreateReq receiver are set, as well as status, created_at and updated_at. 
// The newly created entity id is returned on success or an error.
func (一 CreateReq) Insert(ctx context.Context, tx *sql.Tx,st shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("insert into orders set `status`=?, `created_at`=?, `updated_at`=? ")
	args = append(args, st.ShiftStatus(), time.Now(), time.Now())

	q.WriteString(", `type`=?")
	args = append(args, 一.Type)

	q.WriteString(", `is_buy`=?")
	args = append(args, 一.IsBuy)

	q.WriteString(", `limit_volume`=?")
	args = append(args, 一.LimitVolume)

	q.WriteString(", `limit_price`=?")
	args = append(args, 一.LimitPrice)

	q.WriteString(", `market_base`=?")
	args = append(args, 一.MarketBase)

	q.WriteString(", `market_counter`=?")
	args = append(args, 一.MarketCounter)

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

// Update updates the status of a orders table entity. All the fields of the
// cancelReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 cancelReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update orders set `status`=?, `updated_at`=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `is_buy`=?")
	args = append(args, 一.isBuy)

	q.WriteString(" where `id`=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.Wrap(shift.ErrRowCount, "cancelReq", j.KV("count", n))
	}

	return 一.ID, nil
}

// Update updates the status of a orders table entity. All the fields of the
// postReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 postReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update orders set `status`=?, `updated_at`=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `update_seq`=?")
	args = append(args, 一.UpdateSeq)

	q.WriteString(" where `id`=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.Wrap(shift.ErrRowCount, "postReq", j.KV("count", n))
	}

	return 一.ID, nil
}

// Update updates the status of a orders table entity. All the fields of the
// completeReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 completeReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update orders set `status`=?, `updated_at`=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `update_seq`=?")
	args = append(args, 一.UpdateSeq)

	q.WriteString(" where `id`=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.Wrap(shift.ErrRowCount, "completeReq", j.KV("count", n))
	}

	return 一.ID, nil
}
