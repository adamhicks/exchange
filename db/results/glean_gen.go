package results

// Code generated by glean from glean.go:8. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

const cols = " `id`, `start_seq`, `end_seq`, `created_at`, `results_json` "
const selectPrefix = "select " + cols + " from results where "

var _ time.Time

func Lookup(ctx context.Context, dbc dbc, id int64) (*Result, error) {
	return lookupWhere(ctx, dbc, "id=?", id)
}

// lookupWhere queries the results table with the provided where clause, then scans
// and returns a single row.
func lookupWhere(ctx context.Context, dbc dbc, where string, args ...interface{}) (*Result, error) {
	return scan(dbc.QueryRowContext(ctx, selectPrefix+where, args...))
}

// listWhere queries the results table with the provided where clause, then scans
// and returns all the rows.
func listWhere(ctx context.Context, dbc dbc, where string, args ...interface{}) ([]Result, error) {

	rows, err := dbc.QueryContext(ctx, selectPrefix+where, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var res []Result
	for rows.Next() {
		r, err := scan(rows)
		if err != nil {
			return nil, err
		}
		res = append(res, *r)
	}

	return res, rows.Err()
}

func scan(row row) (*Result, error) {
	var g glean

	err := row.Scan(&g.ID, &g.StartSeq, &g.EndSeq, &g.CreatedAt, &g.Results)
	if err != nil {
		return nil, err
	}

	results, err := g.toResults()
	if err != nil {
		return nil, err
	}

	return &Result{
		ID:        g.ID,
		StartSeq:  g.StartSeq,
		EndSeq:    g.EndSeq,
		CreatedAt: g.CreatedAt,
		Results:   results,
	}, nil
}

// dbc is a common interface for *sql.DB and *sql.Tx.
type dbc interface {
	QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

// row is a common interface for *sql.Rows and *sql.Row.
type row interface {
	Scan(dest ...interface{}) error
}
